{
  parserClass='com.vepanimas.intellij.prisma.lang.parser.PrismaParser'

  implements='com.vepanimas.intellij.prisma.lang.psi.PrismaElement'
  extends='com.vepanimas.intellij.prisma.lang.psi.impl.PrismaElementImpl'

  elementTypeHolderClass='com.vepanimas.intellij.prisma.lang.psi.PrismaElementTypes'
  elementTypeClass='com.vepanimas.intellij.prisma.lang.psi.PrismaElementType'
  tokenTypeClass='com.vepanimas.intellij.prisma.lang.psi.PrismaTokenType'

  psiClassPrefix='Prisma'
  psiImplClassSuffix='Impl'
  psiPackage='com.vepanimas.intellij.prisma.lang.psi'
  psiImplPackage='com.vepanimas.intellij.prisma.lang.psi.impl'

  tokens=[
    MODEL           = 'model'
    TYPE            = 'type'
    ENUM            = 'enum'
    GENERATOR       = 'generator'
    DATASOURCE      = 'datasource'

    UNSUPPORTED     = 'Unsupported'

    LBRACE          = '{'
    RBRACE          = '}'
    LPAREN          = '('
    RPAREN          = ')'
    LBRACKET        = '['
    RBRACKET        = ']'
    EQ              = '='
    DOT             = '.'
    COLON           = ':'
    QUEST           = '?'
    EXCL            = '!'
    AT              = '@'
    ATAT            = '@@'
    COMMA           = ','

    STRING_LITERAL  = 'regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?'
    NUMERIC_LITERAL = 'regexp:-?\d+(\.\d+)?'
    IDENTIFIER      = 'regexp:[a-zA-Z][a-zA-Z0-9\-_]*'
    WHITE_SPACE     = 'regexp:\s+'
  ]

  implements('(Model|Type|Enum|Datasource|Generator)Declaration|TypeAlias')="com.vepanimas.intellij.prisma.lang.psi.PrismaDeclaration"
}

Schema ::= Declaration*

private Declaration ::=
    ModelDeclaration
    | TypeDeclaration
    | EnumDeclaration
    | DatasourceDeclaration
    | GeneratorDeclaration
    | TypeAlias

ModelDeclaration ::= MODEL Identifier FieldDeclarationBlock {
    extends="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaModelTypeDeclarationMixin"
    implements=[
        "com.vepanimas.intellij.prisma.lang.psi.PrismaFieldsContainer"
    ]
}
TypeDeclaration ::= TYPE Identifier FieldDeclarationBlock {
    extends="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaModelTypeDeclarationMixin"
    implements=[
        "com.vepanimas.intellij.prisma.lang.psi.PrismaFieldsContainer"
    ]
}

private FieldDeclarationBlock ::= '{' (FieldDeclaration | BlockAttribute)* '}'
FieldDeclaration ::= IDENTIFIER ':'? FieldType? FieldAttribute*

EnumDeclaration ::= ENUM Identifier '{' (EnumValueDeclaration | BlockAttribute)* '}' {
    extends="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaEnumDeclarationMixin"
}
EnumValueDeclaration ::= Identifier FieldAttribute*

DatasourceDeclaration ::= DATASOURCE Identifier KeyValueBlock {
    extends="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaConfigBlockDeclarationMixin"
}
GeneratorDeclaration ::= GENERATOR Identifier KeyValueBlock {
    extends="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaConfigBlockDeclarationMixin"
}

private KeyValueBlock ::= '{' KeyValue* '}'
KeyValue ::= Identifier '=' Expression

TypeAlias ::= TYPE Identifier '=' TypeReference FieldAttribute* {
    extends="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaTypeAliasMixin"
}

/* Types */
FieldType ::=
    UnsupportedOptionalListType
    | ListType
    | OptionalType
    | LegacyRequiredType
    | LegacyListType
    | TypeReference

UnsupportedType ::= UNSUPPORTED '(' STRING_LITERAL ')'
TypeReference ::= UnsupportedType | Identifier
UnsupportedOptionalListType ::= TypeReference '[' ']' '?'
ListType ::= TypeReference '[' ']'
OptionalType ::= TypeReference '?'
LegacyRequiredType ::= TypeReference '!'
LegacyListType ::= '[' TypeReference ']'

/* Attributes */
BlockAttribute ::= '@@' Path ArgumentsList?
FieldAttribute ::= '@' Path ArgumentsList?

/* Arguments */
ArgumentsList ::= '(' [Argument (',' Argument)*] ','? ')'
Argument ::= NamedArgument | Expression
NamedArgument ::= Identifier ':' Expression

/* Expressions */
Expression ::=
    FunctionCall
    | ArrayExpression
    | NUMERIC_LITERAL
    | STRING_LITERAL
    | Path

FunctionCall ::= Path ArgumentsList
ArrayExpression ::= '[' [Expression (',' Expression)*] ']'

/* Identifiers */
private Identifier ::= IDENTIFIER
Path ::= Identifier ('.' Path?)*