{
  parserClass='com.vepanimas.intellij.prisma.lang.parser.PrismaParser'
  parserUtilClass='com.vepanimas.intellij.prisma.lang.parser.PrismaParserUtil'

  implements='com.vepanimas.intellij.prisma.lang.psi.PrismaElement'
  extends='com.vepanimas.intellij.prisma.lang.psi.impl.PrismaElementImpl'

  elementTypeHolderClass='com.vepanimas.intellij.prisma.lang.psi.PrismaElementTypes'
  elementTypeClass='com.vepanimas.intellij.prisma.lang.psi.PrismaElementType'
  tokenTypeClass='com.vepanimas.intellij.prisma.lang.psi.PrismaTokenType'

  psiClassPrefix='Prisma'
  psiImplClassSuffix='Impl'
  psiPackage='com.vepanimas.intellij.prisma.lang.psi'
  psiImplPackage='com.vepanimas.intellij.prisma.lang.psi.impl'

  tokens=[
    MODEL           = 'model'
    TYPE            = 'type'
    ENUM            = 'enum'
    GENERATOR       = 'generator'
    DATASOURCE      = 'datasource'

    UNSUPPORTED     = 'Unsupported'

    LBRACE          = '{'
    RBRACE          = '}'
    LPAREN          = '('
    RPAREN          = ')'
    LBRACKET        = '['
    RBRACKET        = ']'
    EQ              = '='
    DOT             = '.'
    COLON           = ':'
    QUEST           = '?'
    EXCL            = '!'
    AT              = '@'
    ATAT            = '@@'
    COMMA           = ','

    STRING_LITERAL  = 'regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?'
    NUMERIC_LITERAL = 'regexp:-?\d+(\.\d+)?'
    IDENTIFIER      = 'regexp:[a-zA-Z][a-zA-Z0-9\-_]*'
    WHITE_SPACE     = 'regexp:\s+'
  ]

  extends('FunctionCall|ArrayExpression|LiteralExpression|PathExpression')=Expression
  implements('(Model|Type|Enum|Datasource|Generator)Declaration|TypeAlias')='com.vepanimas.intellij.prisma.lang.psi.PrismaDeclaration'
  implements('(Model|Type|Enum)Declaration|TypeAlias')='com.vepanimas.intellij.prisma.lang.psi.PrismaEntityDeclaration'

  implements('.*Block')='com.vepanimas.intellij.prisma.lang.psi.PrismaBlock'
  mixin('.*Block')='com.vepanimas.intellij.prisma.lang.psi.impl.PrismaBlockMixin'

  implements('FieldDeclaration|EnumValueDeclaration|KeyValue')='com.vepanimas.intellij.prisma.lang.psi.PrismaMemberDeclaration'
  implements('(Field|Block)Attribute')='com.vepanimas.intellij.prisma.lang.psi.PrismaArgumentsOwner'

  extends('NamedArgument|ValueArgument')=Argument

  extends('UnsupportedOptionalListType|ListType|OptionalType|LegacyRequiredType|LegacyListType|SingleType')=FieldType
}

Schema ::= Declaration*

private Declaration ::=
    ModelDeclaration
    | EnumDeclaration
    | DatasourceDeclaration
    | GeneratorDeclaration
    | TypeAlias
    | TypeDeclaration
    {
        pin=1
        recoverWhile=Declaration_recover
    }
private Declaration_recover ::= !TopLevelKeywords
private TopLevelKeywords ::= MODEL | TYPE | ENUM | GENERATOR | DATASOURCE

ModelDeclaration ::= MODEL Identifier FieldDeclarationBlock {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaModelTypeDeclarationMixin"
    implements="com.vepanimas.intellij.prisma.lang.psi.PrismaModelTypeDeclaration"
    pin=1
}
TypeDeclaration ::= TYPE Identifier FieldDeclarationBlock {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaModelTypeDeclarationMixin"
    implements="com.vepanimas.intellij.prisma.lang.psi.PrismaModelTypeDeclaration"
    pin=1
}

FieldDeclarationBlock ::= '{' FieldDeclarationBlockItem* '}' {
    pin=1
}

private FieldDeclarationBlockItem ::=
    FieldDeclaration
    | BlockAttribute
    | <<consumeWithError '@' "parser.unexpected.field.attr">>
    {
        consumeTokenMethod="consumeTokenFast"
    }

FieldDeclaration ::= IDENTIFIER ':'? FieldType? FieldAttribute* {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaFieldDeclarationMixin"
    pin=1
    recoverWhile=UntilNewLine_recover
}

EnumDeclaration ::= ENUM Identifier EnumDeclarationBlock {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaEnumDeclarationMixin"
    pin=1
}
EnumDeclarationBlock ::= '{' (EnumValueDeclaration | BlockAttribute)* '}' {
    pin=1
}
EnumValueDeclaration ::= Identifier FieldAttribute* {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaEnumValueDeclarationMixin"
    pin=1
    recoverWhile=UntilNewLine_recover
}

DatasourceDeclaration ::= DATASOURCE Identifier KeyValueBlock {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaConfigBlockDeclarationMixin"
    pin=1
}
GeneratorDeclaration ::= GENERATOR Identifier KeyValueBlock {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaConfigBlockDeclarationMixin"
    pin=1
}

KeyValueBlock ::= '{' KeyValue* '}' {
    pin=1
}
KeyValue ::= Identifier '=' Expression {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaKeyValueMixin"
    pin=1
    recoverWhile=UntilNewLine_recover
}

TypeAlias ::= TYPE Identifier '=' FieldType FieldAttribute* {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaTypeAliasMixin"
    pin=3
}

/* Types */
FieldType ::=
    UnsupportedOptionalListType
    | ListType
    | OptionalType
    | LegacyRequiredType
    | LegacyListType
    | SingleType
    {
        mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaFieldTypeMixin"
        methods=[getTypeReference]
    }

UnsupportedType ::= UNSUPPORTED '(' STRING_LITERAL ')' {
    pin=1
    recoverWhile=UnsupportedType_recover
    methods=[identifier="UNSUPPORTED"]
}
private UnsupportedType_recover ::= !(')' | '}' | '@' | '@@' | IDENTIFIER | TopLevelKeywords)

TypeReference ::= UnsupportedType | Identifier {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaTypeReferenceMixin"
    implements="com.vepanimas.intellij.prisma.lang.psi.PrismaReferenceElement"
}
UnsupportedOptionalListType ::= TypeReference '[' ']' '?'
ListType ::= TypeReference '[' ']'
OptionalType ::= TypeReference '?'
LegacyRequiredType ::= TypeReference '!'
LegacyListType ::= '[' TypeReference ']'
SingleType ::= TypeReference

/* Attributes */
BlockAttribute ::= '@@' !<<isWhiteSpace>> PathExpression ArgumentsList? {
    pin=1
}
FieldAttribute ::= '@' !<<isWhiteSpace>> PathExpression ArgumentsList? {
    pin=1
}

/* Arguments */
ArgumentsList ::= '(' [Argument (',' Argument)*] ','? ')'
Argument ::= NamedArgument | ValueArgument
NamedArgument ::= Identifier ':' Expression {
    pin=2
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaNamedArgumentMixin"
    implements="com.vepanimas.intellij.prisma.lang.psi.PrismaReferenceElement"
}
ValueArgument ::= Expression {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaValueArgumentMixin"
    methods=[isDefault]
}

/* Expressions */
Expression ::=
    FunctionCall
    | ArrayExpression
    | LiteralExpression
    | PathExpression

FunctionCall ::= PathExpression ArgumentsList {
    implements="com.vepanimas.intellij.prisma.lang.psi.PrismaArgumentsOwner"
}
ArrayExpression ::= '[' [Expression (',' Expression)* ','?] ']' {
    pin=1
}
LiteralExpression ::= NUMERIC_LITERAL | STRING_LITERAL {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaLiteralExpressionMixin"
    methods=[getValue]
}
PathExpression ::= !<<isNewLine>> Path PathMemberAccess* {
    mixin="com.vepanimas.intellij.prisma.lang.psi.impl.PrismaPathExpressionMixin"
    implements="com.vepanimas.intellij.prisma.lang.psi.PrismaQualifiedReferenceElement"
}

/* Path */
Path ::= Identifier { elementType=PathExpression }
left PathMemberAccess ::= '.' Identifier? { elementType=PathExpression }

private Identifier ::= IDENTIFIER

/* Utils */
private UntilNewLine_recover ::= !<<isNewLine>>